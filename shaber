#!/bin/sh -e

# Copyright (c) 2020, Ominitay
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

self_dir_root="$HOME/.local/share/shaber"
self_dir_disabled="$self_dir_root/disabled"
self_dir_tmp="$self_dir_root/tmp"
self_dir_enabled="$self_dir_root/enabled"

ipa_native_dir="$self_dir_root/ipa"

self_dir_config_local="$(dirname "$0")"
self_dir_config="$HOME/.config/shaber"
self_dir_config_default="$self_dir_root/default"
self_dir_config_global="/etc/shaber"

api_url_root="https://beatmods.com"
api_url_mod="https://beatmods.com/api/v1/mod"
api_url_version="https://versions.beatmods.com/versions.json"

self_version=0.2.6

log() { printf "%b%s: %s%b" "$3" "$1" "$2" "\033[0m\n" > /dev/stderr; }
log_debug() { return 0; }
log_info() { log "Info" "$1" "\033[0m"; }
log_warn() { log "Warn" "$1" "\033[1;38;5;214m"; }
log_error() { log "Error" "$1" "\033[1;38;5;196m"; }

self_enable_debug() { log_debug() { log "Debug" "$1" "\033[1;38;5;27m" ;} }

config_get() {
  # This file does not have to exist, so don't warn if it doesn't.
  # shellcheck disable=SC1091
  # Get variables from file so that shellcheck knows assigned variables.
  # shellcheck source=config.default
  if [ -f "$self_dir_config/config" ]
  then
    . "$self_dir_config/config" || { log_error "Failed to source config file from '$self_dir_config/config'"; exit 1; }
  elif [ -f "$self_dir_config_local/config" ]
  then
    log_info "Using local config file at '$self_dir_config_local/config'."
    . "$self_dir_config_local/config" || { log_error "Failed to source config file from '$self_dir_config_local/config'"; exit 1; }
  elif [ -f "$self_dir_config_default/config" ]
  then
    log_warn "Using default config file at '$self_dir_config_default/config'. It is recommended to copy this to '$self_dir_config/config' and modify it to your needs."
    . "$self_dir_config_default/config" || { log_error "Failed to source config file from '$self_dir_config_default/config'"; exit 1; }
  elif [ -f "$self_dir_config_global/config" ]
  then
    log_warn "Using default config file at '$self_dir_config_global/config'. It is recommended to copy this to '$self_dir_config/config' and modify it to your needs."
    . "$self_dir_config_global/config" || { log_error "Failed to source config file from '$self_dir_config_global/config'"; exit 1; }
  else
    log_error "Could not find a default config file at '$self_dir_config_default/config' or '$self_dir_config_global/config'"
    exit 1
  fi
}

tool_download() ( curl -fsL "$1"; )

tool_mod_check_enabled() { [ -d "$self_dir_enabled/$1" ]; }

tool_mod_check_disabled() { [ -d "$self_dir_disabled/$1" ]; }

tool_mod_check_local() { tool_mod_check_enabled "$1" || tool_mod_check_disabled "$1"; }

tool_mod_get_location() {
  location="none"
  tool_mod_check_enabled "$1" && location="$self_dir_enabled/$1"
  tool_mod_check_disabled "$1" && location="$self_dir_disabled/$1"
  printf "%s" "$location"
}

tool_mod_list_enabled() { ls -1N "$self_dir_enabled"; }

tool_mod_list_disabled() { ls -1N "$self_dir_disabled"; }

tool_mod_list_all () { tool_mod_list_enabled; tool_mod_list_disabled; }

tool_mod_set_explicit () {
  if [ -d "$self_dir_enabled/$1/.shaber" ]
  then
    if [ -f "$self_dir_enabled/$1/.shaber/explicit" ]
    then
      log_warn "Mod '$1' is already set as explicit."
    else
      touch "$self_dir_enabled/$1/.shaber/explicit"
      log_info "Mod '$1' set as explicit."
    fi
  else
    log_error "Mod '$1' is not enabled."; exit 1
  fi
}

tool_mod_unset_explicit () {
  if [ -d "$self_dir_enabled/$1/.shaber" ]
  then
    if [ -f "$self_dir_enabled/$1/.shaber/explicit" ]
    then
      rm -f "$self_dir_enabled/$1/.shaber/explicit"
      log_info "Mod '$1' unset as explicit."
    else
      log_warn "Mod '$1' is not set as explicit."
    fi
  else
    log_error "Mod '$1' is not enabled."; exit 1
  fi
}

tool_mod_set_explicit_all() {
  while IFS= read -r mod
  do
    [ "$mod" = "" ] || tool_mod_set_explicit "$mod"
  done <<EOF
$(tool_mod_list_enabled)
EOF
}

tool_mod_unset_explicit_all() {
  while IFS= read -r mod
  do
    [ "$mod" = "" ] || tool_mod_unset_explicit "$mod"
  done <<EOF
$(tool_mod_list_enabled)
EOF
}

tool_urlencode() ( printf "%s" "$1" | jq -Rr '@uri'; )

tool_split() ( printf "%s" "$1" | cut -d "$2" -f "$3"; )

tool_find_in_array() (
  while IFS= read -r match
  do [ "$match" = "$1" ] && return 0
  done <<EOF
$2
EOF
  return 1
)

tool_find_in_array_json_name() (
  while IFS= read -r match
  do [ "$(json_get_name "$match")" = "$1" ] && return 0
  done <<EOF
$2
EOF
  return 1
)

tool_dedupe_array() ( printf "%s" "$1" | awk '!seen[$0]++' )

tool_version_compare() { [ "$1" = "$(printf "%s\n%s" "$1" "$2" | sort -V | head -n1)" ]; }

tool_mod_check_dependency() {
  dependencies=""
  dependencies_needed=""
  explicits=""

  while IFS= read -r mod
  do
    [ "$mod" = "" ] || {
      if [ -f "$self_dir_enabled/$mod/.shaber/explicit" ]
      then
        explicits="$mod
$explicits"
      else
        dependencies="$mod
$dependencies"
      fi
    }
  done << EOF
$(ls -1N "$self_dir_enabled")
EOF

  while IFS= read -r mod
  do
    [ "$mod" = "" ] || {
      dependencies_needed="$(mod_get_dependency_tree "$mod")
$dependencies_needed"
    }
  done << EOF
$explicits
EOF

  tool_find_in_array "$1" "$dependencies_needed"
}

self_get_version() { printf "shaber-%s\n" "$self_version"; }

self_check_command() ( command -v "$1" > /dev/null; )

self_check_dependencies() {
  log_debug "Checking dependencies"
  self_check_command "jq"           || { log_error "jq is not installed"; exit 1; }
  self_check_command "curl"         || { log_error "curl is not installed"; exit 1; }
  self_check_command "wget"         || { log_error "wget is not installed"; exit 1; }
  self_check_command "unzip"        || { log_error "unzip is not installed"; exit 1; }
  bs_check_version                  || { log_error "Beat Saber version is invalid"; exit 1; }
  [ -d "$bs_dir" ]                  || { log_error "Cannot find Beat Saber's directory"; exit 1; }
  [ -d "$self_dir_root" ]           || mkdir "$self_dir_root"         || { log_error "Couldn't create root directory '$self_dir_root'"; exit 1; }
  [ -d "$self_dir_disabled" ]       || mkdir "$self_dir_disabled"     || { log_error "Couldn't create disabled directory '$self_dir_disabled'"; exit 1; }
  [ -d "$self_dir_tmp" ]            || mkdir "$self_dir_tmp"          || { log_error "Couldn't create downloads directory '$self_dir_tmp'"; exit 1; }
  [ -d "$self_dir_enabled" ]        || mkdir "$self_dir_enabled"      || { log_error "Couldn't create enabled directory '$self_dir_enabled'"; exit 1; }
  [ -n "$(ls -A "$self_dir_tmp")" ] && { rm -rf "${self_dir_tmp:?}/"* || { log_error "Failed to empty $self_dir_tmp"; exit 1; } }
  log_debug "All dependencies seem okay"
}

bs_check_version() ( api_get_version_list | jq --exit-status "index(\"$bs_version\")" > /dev/null; )

api_get_mod_json() (
  mod_json="$(tool_download "$api_url_mod?status=approved&gameVersion=$bs_version&name=$(tool_urlencode "$1")" | jq -c --exit-status '.[0]' || { log_error "Couldn't get metadata for mod '$1'"; exit 1; } )"
  if [ "$1" = "$(json_get_name "$mod_json")" ]
  then
    printf "%s\n" "$mod_json"
  else
    log_error "Couldn't find mod '$1'"; exit 1
  fi
)

api_get_version_list() ( tool_download "$api_url_version" || { log_error "Couldn't get version list"; exit 1; }; )

api_get_mod_list() { tool_download "$api_url_mod?status=approved&gameVersion=$bs_version" | jq -r --exit-status '.[] | .name' || { log_error "Couldn't get mod list from API."; exit 1; } }

json_get_download_url() ( printf "%s%s\n" "$api_url_root" "$(printf "%s" "$1" | jq -r --exit-status '.downloads | .[0] | .url')" )

json_get_hashlist() {
  mod_name="$(json_get_name "$1")"
  mod_location="$(tool_mod_get_location "$mod_name")"
  if [ "$mod_location" = "none" ]
  then
    log_error "Mod '$mod_name' is not downloaded."; exit 1
  else
    printf "%s\n" "$1" | jq -r --exit-status ".downloads | .[0] | .hashMd5 | .[] | [.hash,.file] | join(\"  $mod_location/\")"
  fi
}

json_check_integrity() {
  if md5sum_output="$(json_get_hashlist "$1" | md5sum -c)"
  then
    log_info "Mod '$(json_get_name "$1")' passed integrity check."
  else
    log_error "Mod '$(json_get_name "$1")' did not pass integrity check."; exit 1
  fi
  log_debug "md5sum output:
$md5sum_output"
}

json_get_dependencies() ( printf "%s" "$1" | jq -r --exit-status '.dependencies | .[] | .name' )

json_get_name() ( printf "%s" "$1" | jq -r --exit-status '.name' )

json_get_version() ( printf "%s" "$1" | jq -r --exit-status '.version' )

json_get_dependency_tree() (
  dependencytree="$3"
  recursed="$2"
  [ "$recursed" = "" ] && recursed="0"
  log_debug "Getting data from API for '$(json_get_name "$1")'"
  while IFS= read -r dependency
  do
    [ "$dependency" = "" ] || {
      tool_find_in_array_json_name "$dependency" "$dependencytree" || {
        dependencytree="$(json_get_dependency_tree "$(api_get_mod_json "$dependency")" "1" "$dependencytree")"
      }
    }
  done <<EOF
$(json_get_dependencies "$1")
EOF
  [ "$recursed" -eq 1 ] && {
    dependencytree="$1
$dependencytree"
  }
  printf "%s" "$dependencytree"
)

mod_download() (
  log_debug "Mod '$1' location: $(tool_mod_get_location "$1")"
  ( cd "$self_dir_tmp"; wget "$(json_get_download_url "$1")" )
  unzip -q -d "$self_dir_disabled/$(json_get_name "$1")" "$self_dir_tmp/$(basename "$(json_get_download_url "$1")")"
  rm -f "$self_dir_tmp/$(basename "$(json_get_download_url "$1")")"
  mkdir "$self_dir_disabled/$(json_get_name "$1")/.shaber"
  printf "%s\n%s\n" "$(json_get_version "$1")" "$bs_version" > "$self_dir_disabled/$(json_get_name "$1")/.shaber/version"
  printf "%s\n" "$(json_get_dependencies "$1")" > "$self_dir_disabled/$(json_get_name "$1")/.shaber/depends"

  log_info "Checking integrity of mod '$(json_get_name "$1")'."
  json_check_integrity "$1"
)

mod_download_tree() {
  mod_json="$(api_get_mod_json "$1")"
  log_info "Searching for dependencies"
  download_queue="$(json_get_dependency_tree "$mod_json")"
  while IFS= read -r mod
  do
    [ "$mod" = "" ] || {
      [ "$(tool_mod_get_location "$(json_get_name "$mod")")" = "none" ] && {
        log_info "Downloading dependency '$(json_get_name "$mod")'"
        mod_download "$mod"
      }
    }
  done << EOF
$download_queue
EOF

  if [ "$(tool_mod_get_location "$(json_get_name "$mod_json")")" = "none" ] 
  then
    log_info "Downloading mod '$(json_get_name "$mod_json")'"
    mod_download "$mod_json"
  else
    log_warn "Mod '$(json_get_name "$mod_json")' is already downloaded. Run 'shaber mod update $(json_get_name "$mod_json")' to update it."
  fi
}


mod_link() (
  rootdir="$2"
  [ "$rootdir" = "" ] && rootdir="$1"
  moddir="$(printf "%s" "$1" | sed -e "s|$rootdir||g")"

  [ -d "$bs_dir/$moddir" ] || mkdir "$bs_dir/$moddir"
  while IFS= read -r item
  do
    [ "$item" = "" ] || {
      log_debug "$moddir/$item"
      [ -f "$1/$item" ] && {
        [ -f "$bs_dir/$moddir/$item" ] && { log_error "File conflict: $bs_dir${moddir:+$moddir/}$item"; exit 1; }
        ln -s "$1/$item" "$bs_dir/$moddir/$item"
      }
      [ -d "$1/$item" ] && {
        mod_link "$1/$item" "$rootdir"
      }
    }
  done << EOF
$(ls -1N "$1")

EOF
)

mod_unlink() (
  rootdir="$2"
  [ "$rootdir" = "" ] && rootdir="$1"
  log_debug "$rootdir"
  log_debug "$1"
  moddir="$(printf "%s" "$1" | sed -e "s|$rootdir||g")"

  while IFS= read -r item
  do
    [ "$item" = "" ] || {
      log_debug "$moddir/$item"
      [ -f "$1/$item" ] && {
        [ -f "$bs_dir/$moddir/$item" ] || log_warn "Couldn't find symlink: $bs_dir/$moddir/$item"
        rm -f "$bs_dir/$moddir/$item"
      }
      [ -d "$1/$item" ] && {
        mod_unlink "$1/$item" "$rootdir"
      }
    }
  done << EOF
$(ls -1N "$1")

EOF

  find "$bs_dir" -mindepth 1 -type d -empty -delete
)

mod_get_dependency_tree() (
  mod_location="$(tool_mod_get_location "$1")"
  dependencytree="$2"
  recursed="$3"
  [ "$recursed" = "" ] && recursed=0
  if [ "$mod_location" = "none" ]
  then
    log_error "Couldn't find mod '$1'"; exit 1
  else
    while IFS= read -r dependency
    do
      [ "$dependency" = "" ] || {
        tool_find_in_array "$dependency" "$dependencytree" || {
          if [ "$(tool_mod_get_location "$dependency")" = "none" ]
          then
            log_error "Dependency '$dependency' not downloaded"; exit 1
          else
            dependencytree="$(mod_get_dependency_tree "$dependency" "$dependencytree" "1")"
          fi
        }
      }
    done << EOF
$(cat "$mod_location/.shaber/depends")
EOF
  fi

  [ "$recursed" = "1" ] && dependencytree="$1
$dependencytree"

  printf "%s" "$dependencytree"
)

mod_enable() (
  mod_location="$(tool_mod_get_location "$1")"
  if [ "$mod_location" = "$self_dir_enabled/$1" ]
  then
    log_info "'$1' already enabled"
  else
    mv "$(tool_mod_get_location "$1")" "$self_dir_enabled"
    mod_link "$self_dir_enabled/$1"
    log_info "Enabled '$1'"
  fi
)

mod_enable_tree() {
  enable_queue="$(mod_get_dependency_tree "$1")"
  log_debug "$enable_queue"
  while IFS= read -r dependency
  do
    [ "$dependency" = "" ] || {
      mod_enable "$dependency"
    }
  done << EOF
$enable_queue
EOF
  mod_enable "$1"
  tool_mod_set_explicit "$1"
}

mod_disable() (
  if [ -d "$self_dir_enabled/$1" ]
  then
    mod_unlink "$self_dir_enabled/$1"
    mv "$self_dir_enabled/$1" "$self_dir_disabled/$1"
    [ -f "$self_dir_disabled/$1/.shaber/explicit" ] && rm -f "$self_dir_disabled/$1/.shaber/explicit"
    log_info "Disabled '$1'"
  else
    log_info "'$1' not enabled"
  fi
)

mod_remove() {
  if tool_mod_check_local "$1"
  then
    tool_mod_check_enabled "$1" && mod_disable "$1"
    rm -rf "${self_dir_disabled:?}/${1:?}"
    log_info "Removed '$1'"
  else
    log_warn "Mod '$1' is not downloaded."
  fi
}

mod_enable_all() {
  while IFS= read -r mod
  do
    [ "$mod" = "" ] || {
      mod_enable "$mod"
      tool_mod_set_explicit "$mod"
    }
  done <<EOF
$(tool_mod_list_disabled)
EOF
}

mod_disable_all() {
  while IFS= read -r mod
  do
    [ "$mod" = "" ] || mod_disable "$mod"
  done <<EOF
$(tool_mod_list_enabled)
EOF
}

mod_remove_all() {
  while IFS= read -r mod
  do
    [ "$mod" = "" ] || mod_remove "$mod"
  done <<EOF
$(tool_mod_list_all)
EOF
}

orphans_get() {
  orphans=""
  dependencies=""
  dependencies_needed=""
  explicits=""

  while IFS= read -r mod
  do
    [ "$mod" = "" ] || {
      if [ -f "$self_dir_enabled/$mod/.shaber/explicit" ]
      then
        explicits="$mod
$explicits"
      else
        dependencies="$mod
$dependencies"
      fi
    }
  done << EOF
$(ls -1N "$self_dir_enabled")
EOF

  while IFS= read -r mod
  do
    [ "$mod" = "" ] || {
      dependencies_needed="$(mod_get_dependency_tree "$mod")
$dependencies_needed"
    }
  done << EOF
$explicits
EOF

  log_debug "dependencies: $dependencies"
  log_debug "explicits: $explicits"
  log_debug "dependencies_needed: $dependencies_needed"

  dependencies_needed="$(tool_dedupe_array "$dependencies_needed")"

  while IFS= read -r dependency
  do
    [ "$dependency" = "" ] || {
      tool_find_in_array "$dependency" "$dependencies_needed" || {
        orphans="$dependency
$orphans"
      }
    }
  done << EOF
$dependencies
EOF

  printf "%s" "$orphans"
}

orphans_disable() {
  while IFS= read -r orphan
  do
    [ "$orphan" = "" ] || {
      log_debug "Disabling orphan '$orphan'"
      mod_disable "$orphan"
    }
  done << EOF
$(orphans_get)

EOF
}

orphans_remove() {
  while IFS= read -r orphan
  do
    [ "$orphan" = "" ] || {
      log_debug "Removing orphan '$orphan'"
      mod_remove "$orphan"
    }
  done << EOF
$(orphans_get)

EOF
}

orphans_setexplicit() {
  while IFS= read -r orphan
  do
    [ "$orphan" = "" ] || {
      tool_mod_set_explicit "$orphan"
    }
  done << EOF
$(orphans_get)

EOF
}

mod_check_update() {
  if [ "$(tool_mod_get_location "$1")" = "none" ]
  then
    log_error "Mod '$1' not downloaded or installed."; exit 1
  else
    if tool_version_compare "$(json_get_version "$(api_get_mod_json "$1")")" "$(tool_split "$(cat "$(tool_mod_get_location "$1")/.shaber/version")" "
" "1")"
    then
      log_info "Mod '$1' is up-to-date"
    else
      log_info "Mod '$1' is out-of-date; update with the command 'shaber mod update $1'"
    fi
  fi
}

mod_check_update_all() {
  while IFS= read -r mod
  do
    [ "$mod" = "" ] || mod_check_update "$mod"
  done <<EOF
$(tool_mod_list_all)
EOF
}

mod_update() {
  if [ "$(tool_mod_get_location "$1")" = "none" ]
  then
    log_error "Mod '$1' not downloaded or installed."; exit 1
  else
    mod_json="$(api_get_mod_json "$1")"
    if tool_version_compare "$(json_get_version "$mod_json")" "$(tool_split "$(cat "$(tool_mod_get_location "$1")/.shaber/version")" "
" "1")"
    then
      log_info "Mod '$1' is up-to-date"
    else
      mod_enabled=0; tool_mod_check_enabled "$1" && mod_enabled=1
      mod_type="dependency"; [ -f "$self_dir_enabled/$1/.shaber/explicit" ] && mod_type="explicit"
      log_info "Mod '$1' is out-of-date; proceeding to update"
      mod_remove "$1"
      log_info "Downloading mod '$1'"
      mod_download "$mod_json"
      [ $mod_enabled -eq 1 ] && mod_enable "$1"
      [ "$mod_type" = "explicit" ] && tool_mod_set_explicit "$1"
      log_info "Updated mod '$1'"
    fi
  fi
}

mod_update_all() {
  while IFS= read -r mod
  do
    [ "$mod" = "" ] || mod_update "$mod"
  done <<EOF
$(tool_mod_list_all)
EOF
}

ipa_native_download_latest() {
  if ! tool_mod_check_local "BSIPA"
  then
    mod_download_tree "BSIPA"
  else
    mod_update "BSIPA"
  fi
  if ! tool_mod_check_enabled "BSIPA"
  then
    mod_enable "BSIPA"
  else
    log_info "BSIPA is already enabled"
  fi

  ipa_latest_version="$(curl -fsL -H 'Accept: application/json' "https://github.com/geefr/BSIPA-Linux/releases/latest" | jq -r ".tag_name")"

  if [ -d "$ipa_native_dir" ]
  then
    if tool_version_compare "$ipa_latest_version" "$(cat "$ipa_native_dir/version")"
    then
      log_info "Native Linux IPA is already up-to-date"
      return
    else
      log_info "Native Linux IPA is out-of-date; updating"
      log_debug "Removing old Native Linux IPA"
      rm -rf "${ipa_native_dir:?}"
    fi
  fi

  mkdir "$ipa_native_dir"

  log_info "Downloading native Linux IPA"
  tool_download "https://github.com/geefr/BSIPA-Linux/releases/download/$ipa_latest_version/IPA-Minimal" > "$self_dir_tmp/IPA-Minimal"
  log_info "Native Linux IPA successfully downloaded"
  mv "$self_dir_tmp/IPA-Minimal" "$ipa_native_dir/IPA-Minimal"
  chmod +x "$ipa_native_dir/IPA-Minimal"
  printf "%s\n" "$ipa_latest_version" > "$ipa_native_dir/version"
  log_info "Native Linux IPA successfully enabled"
}

ipa_native_patch() {
  tool_mod_check_local "BSIPA"    || { log_error "BSIPA is not downloaded or enabled."; exit 1; }
  tool_mod_check_enabled "BSIPA"  || { log_error "BSIPA is not enabled."; exit 1; }
  [ -d "$ipa_native_dir" ]        || { log_error "Native Linux IPA is not downloaded."; exit 1; }
  [ -f "$bs_dir/../../compatdata/620980/pfx/user.reg" ] || { 
    log_error "Beat Saber Proton prefix not detected: please run the game once, and check that
you have set the game's directory correctly."; exit 1
  }
  
  log_info "All checks passed, continuing to patch..."

  (
    cd "$bs_dir"
    "$ipa_native_dir/IPA-Minimal" "Beat Saber.exe" -n -f --relativeToPwd

    grep -Fxq '"winhttp"="native,builtin"' "$bs_dir/../../compatdata/620980/pfx/user.reg" || (
      echo '[Software\\Wine\\DllOverrides]
"winhttp"="native,builtin"' >> "$bs_dir/../../compatdata/620980/pfx/user.reg" ) || { log_error "Failed to add DllOverrides to user.reg"; exit 1; }
  )

  log_info "Beat Saber has been successfully patched with native BSIPA."
}

args_parse() {
  OPT_HELP=0
  OPT_VERSION=0

  # Parse options

  for arg
  do
    shift
    case "$arg" in
      --help|-h|-\?)
        OPT_HELP=1;;
      --version|-v)
        OPT_VERSION=1;;
      --verbose|-V)
        self_enable_debug ;;
      --*|-*)
        log_error "Invalid option '$arg'"; exit 1;;
      *)
        set -- "$@" "$arg";;
    esac
  done

  # Parse arguments

  [ $OPT_VERSION = 1 ] && { self_get_version; exit; }
  [ $OPT_HELP = 1 ] || [ $# -lt 2 ] && { parse_helper_help "$@"; exit; }

  opt=$1; shift

  case $opt in
    m|mod) parse_helper_mod "$@";;
    o|orphans) parse_helper_orphans "$@";;
    i|ipa) parse_helper_ipa "$@";;
    *) log_error "Mode '$opt' not recognised."; exit 1 ;;
  esac
}

parse_helper_help() {
  case "$1" in
    m|mod)
    usage_message="shaber [options] $1 <action> [arguments...]

-h, --help    | Output this help page. Specific pages exist for each mode.
-v, --version | Output the version of this script.
-V, --verbose | Output a more detailed log for debugging.

These are all available actions:

dl, download    | Download (a) mod(s) from beatmods.com. Accepts at least one
                | argument. All dependencies will also be downloaded.
u,  update      | Checks the version(s) of (a) mod(s), and updates them if out of
                | date.
c,  checkupdate | Checks the version(s) of (a) mod(s), and updates them if out of
                | date.
e,  enable      | Enable (a) disabled mod(s). Accepts at least one argument.
                | All dependencies will also be activated.
d,  disable     | Disables (an) enabled mod(s). Accepts at least one argument.
r,  remove      | Deletes (a) mod(s) (enabled or disabled) entirely.
l,  list        | Accepts one of 4 arguments: api, all, enabled, disabled, orphaned.
                | With api, all mods on beatmods.com will be listed. The other 3 are
                | self-explanatory.
s,  settype     | Accepts one of two arguments: dependency, explicit. This allows
                | mods to be set as explicitly installed, or as a dependency.
                | Dependencies will automatically be removed if no mods depend on
                | them. After this first argument, any number of mods can be set as
                | arguments to perform the action on.

Note: The actions update, checkupdate, enable, disable, and remove may be run
      with the argument 'all' to run the action on all applicable mods."
    ;;
    o|orphans)
    usage_message="shaber [options] $1 <action> [arguments...]

-h, --help    | Output this help page. Specific pages exist for each mode.
-v, --version | Output the version of this script.
-V, --verbose | Output a more detailed log for debugging.

These are all available actions:

d, disable     | Disables all orphaned dependencies.
r, remove      | Deletes all orphaned dependencies.
s, setexplicit | Sets all orphaned dependencies as explicit."
    ;;
    i|ipa)
    usage_message="shaber [options] $1 <action> [arguments...]

-h, --help    | Output this help page. Specific pages exist for each mode.
-v, --version | Output the version of this script.
-V, --verbose | Output a more detailed log for debugging.

These are all available actions:

dl, download | Downloads the BSIPA mod, and the native IPA port by geefr.
p,  patch    | Patches Beat Saber with BSIPA, using the native Linux port by geefr."
    ;;
    *)
    usage_message="shaber [options] <mode> <action> [arguments...]

-h, --help    | Output this help page. Specific pages exist for each mode.
-v, --version | Output the version of this script.
-V, --verbose | Output a more detailed log for debugging.

These are all available modes:

m, mod     | Manage mods, including downloading, enabling, and disabling.
o, orphans | Manage orphaned dependencies, includng removing and disabling.
i, ipa     | Download BSIPA-Linux, and patch the game."
    ;;
  esac
  log "Usage" "$usage_message"
}

parse_helper_mod() {
  opt=$1; shift
  case $opt in
    dl|download) parse_helper_mod_download "$@";;
    u |update) parse_helper_mod_update "$@";;
    c |checkupdate) parse_helper_mod_checkupdate "$@";;
    e |enable) parse_helper_mod_enable "$@";;
    d |disable) parse_helper_mod_disable "$@";;
    r |remove) parse_helper_mod_remove "$@";;
    l |list) parse_helper_mod_list "$@";;
    s |settype) parse_helper_mod_settype "$@";;
    *) log_error "Invalid action '$opt'"; exit 1;;
  esac
}

parse_helper_mod_download() {
  [ $# -eq 0 ] && { log_error "Argument(s) expected, but none given."; exit 1; }
  config_get
  self_check_dependencies
  for arg
  do
    if [ "$arg" = "BSIPA" ]
    then
      log_warn "Please download '$arg' with 'shaber ipa download'"
    else
      mod_download_tree "$arg"
    fi
  done
}

parse_helper_mod_update() {
  [ $# -eq 0 ] && { log_error "Argument(s) expected, but none given."; exit 1; }
  config_get
  self_check_dependencies
  for arg
  do
    if [ "$arg" = "all" ]
    then
      mod_update_all
    else
      mod_update "$arg"
    fi
  done
}

parse_helper_mod_checkupdate() {
  [ $# -eq 0 ] && { log_error "Argument(s) expected, but none given."; exit 1; }
  config_get
  self_check_dependencies
  for arg
  do
    if [ "$arg" = "all" ]
    then
      mod_check_update_all
    else
      mod_check_update "$arg"
    fi
  done
}

parse_helper_mod_enable() {
  [ $# -eq 0 ] && { log_error "Argument(s) expected, but none given."; exit 1; }
  config_get
  self_check_dependencies
  for arg
  do
    if [ "$arg" = "all" ]
    then
      mod_enable_all
    else
      mod_enable_tree "$arg"
    fi
  done
}

parse_helper_mod_disable() {
  [ $# -eq 0 ] && { log_error "Argument(s) expected, but none given."; exit 1; }
  config_get
  self_check_dependencies
  for arg
  do
    if [ "$arg" = "all" ]
    then
      mod_disable_all
    else
      tool_mod_check_dependency "$arg" && { log_error "Mod '$arg' is depended upon, and cannot be disabled."; exit 1; }
      mod_disable "$arg"
    fi
  done
  [ "$(orphans_get)" = "" ] || log_info "Orphans detected; you can disable them with the command 'shaber orphans disable'"
}

parse_helper_mod_remove() {
  [ $# -eq 0 ] && { log_error "Argument(s) expected, but none given."; exit 1; }
  config_get
  self_check_dependencies
  for arg
  do
    if [ "$arg" = "all" ]
    then
      mod_remove_all
    else
      tool_mod_check_dependency "$arg" && { log_error "Mod '$arg' is depended upon, and cannot be removed."; exit 1; }
      mod_remove "$arg"
    fi
  done
  [ "$(orphans_get)" = "" ] || log_info "Orphans detected; you can remove them with the command 'shaber orphans remove'"
}

parse_helper_mod_list() {
  [ $# -eq 0 ] && { log_error "Argument expected, but none given."; exit 1; }
  [ $# -gt 1 ] && { log_error "Multiple arguments given, only one expected."; exit 1; }
  config_get
  self_check_dependencies
  case "$1" in
    api) api_get_mod_list;;
    all) tool_mod_list_all;;
    enabled) tool_mod_list_enabled;;
    disabled) tool_mod_list_disabled;;
    orphaned) orphans_get;;
  esac
}

parse_helper_mod_settype() {
  [ $# -lt 2 ] && { log_error "Two or more arguments expected, but $# given."; exit 1; }
  mod_type="$1"; shift
  [ "$mod_type" = "explicit" ] || [ "$mod_type" = "dependency" ] || { log_error "First argument must be either 'explicit' or 'dependency'."; exit 1; }
  config_get
  self_check_dependencies
  for arg
  do
    if [ "$arg" = "all" ]
    then
      [ "$mod_type" = "explicit" ]   && tool_mod_set_explicit_all "$arg"
      [ "$mod_type" = "dependency" ] && tool_mod_unset_explicit_all "$arg"
    else
      [ "$mod_type" = "explicit" ]   && tool_mod_set_explicit "$arg"
      [ "$mod_type" = "dependency" ] && tool_mod_unset_explicit "$arg"
    fi
  done
}

parse_helper_orphans() {
  opt=$1; shift
  case $opt in
    d|disable) parse_helper_orphans_disable "$@";;
    r|remove) parse_helper_orphans_remove "$@";;
    s|setexplicit) parse_helper_orphans_setexplicit "$@";;
    *) log_error "Invalid action '$opt'"; exit 1;;
  esac
}

parse_helper_orphans_disable() {
  [ $# -gt 0 ] && { log_error "No arguments expected."; exit 1; }
  config_get
  self_check_dependencies
  orphans_disable
}

parse_helper_orphans_remove() {
  [ $# -gt 0 ] && { log_error "No arguments expected."; exit 1; }
  config_get
  self_check_dependencies
  orphans_remove
}

parse_helper_orphans_setexplicit() {
  [ $# -gt 0 ] && { log_error "No arguments expected."; exit 1; }
  config_get
  self_check_dependencies
  orphans_setexplicit
}

parse_helper_ipa() {
  opt=$1; shift
  case $opt in
    p |patch) parse_helper_ipa_patch "$@";;
    dl|download) parse_helper_ipa_download "$@";;
    *) log_error "Invalid action '$opt'"; exit 1;;
  esac
}

parse_helper_ipa_patch() {
  [ $# -gt 0 ] && { log_error "No arguments expected."; exit 1; }
  config_get
  self_check_dependencies
  ipa_native_patch
}

parse_helper_ipa_download() {
  [ $# -gt 0 ] && { log_error "No arguments expected."; exit 1; }
  config_get
  self_check_dependencies
  ipa_native_download_latest
}

args_parse "$@"
